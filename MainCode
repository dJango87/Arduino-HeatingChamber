/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~ACKNOWLEDGEMENT~~~~~~~~~~~~~~~~~~~~~~~~~~~
  K-type thermocouple MAX31855 interface 
  with LCD display is written by:
  Limor Fried/Ladyada for Adafruit Industries.  
  Reference: https://github.com/adafruit/Adafruit-MAX31855-library

  Data smoothing is created by:
  David A. Mellis  <dam@mellis.org>
  Modified 9 Apr 2012, by Tom Igoe
  Reference: http://www.arduino.cc/en/Tutorial/Smoothing

  Analog input is written by:
  David Cuartielles
  Modified 30 Aug 2011, by Tom Igoe
  Reference: http://www.arduino.cc/en/Tutorial/AnalogInput

  PID (ver1.1.1) is written by:
  Brett Beauregard <br3ttb@gmail.com> brettbeauregard.com
  Reference: http://playground.arduino.cc/Code/PIDLibrary  
~~~~~~~~~~~~~~~~~~~~~~~~~~~ACKNOWLEDGEMENT~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Date: 05-01-2016
  Author: J.P."Jimmy"Tey
  TITLE: Temperature reading acquired from K-type thermocouple and 
         displayed on LCD with PID control
  Objective: 1. To read temperautre from K-type thermocouple through SPI
                interface.
             2. To display temperature reading onto backlit-LCD
             3. Serial output for data logging on computer
             4. Data smoothing
             5. Serial output
             6. Voltage divider to SET VALUE + switch to enter and exit
                SET VALUE mode (Max value = 200)
             7. PID control
             8. TEST: determine loop time
  Version: 0.6.1_test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
 
#include <SPI.h>
#include "Adafruit_MAX31855.h"
#include <LiquidCrystal.h>
#include <PID_v1.h>

int delaytime=500; //delay time for temperature monitoring loop

//Define degree symbol
byte deg[8] = {
                B00110,
                B01001,
                B01001,
                B00110,
                B00000,
                B00000,
                B00000,
                B00000,
              };

//**********THERMOCOUPLE (MAX31855K)**********
//Define SPI pins for MAX31855K
int thermoCLK = 8;
int thermoCS  = 9;
int thermoDO  = 10;
// Initialize the Thermocouple
Adafruit_MAX31855 thermocouple(thermoCLK, thermoCS, thermoDO);
//**********THERMOCOUPLE (MAX31855K)**********

//**********TEMPERATURE SMOOTHING**********
//Define variables for smoothing TEMPERATURE
const int numReadings = 10;
float     readTemp[numReadings];
int       readIndex   = 0;
float     total       = 0;
int       averageC    = 0;
double    c = 0;
//**********TEMPERATURE SMOOTHING**********

//**********SET VALUE**********
//Analog input to vary SET VALUE
const int MaxT        = 200; //Maximum SET VALUE
int       inputPin    = A0;
//Digital switch for setting SET VALUE
const int digitalIn   = 13;
//const int digitalOut  = 1;
int       switchState = 0;
//Smoothing
const int numReadings2 = 5;
float     readValue[numReadings2];
int       readIndex2   = 0;
float     totalValue   = 0;
float     averageValue = 0;
int       setValue     = 0;
//**********SET VALUE**********

//**********PID**********
int RelayPin = 12;
double Setpoint, Input, Output; //define variables
//specify the links and initial tuning parameters
PID myPID(&Input, &Output, &Setpoint,2,0.4,2, DIRECT);
int WindowSize = 5000;
unsigned long windowStartTime;
//**********PID**********

// Initialize the library with the numbers of the interface pins
LiquidCrystal lcd(2, 3, 4, 5, 6, 7);
  
void setup() 
{
  windowStartTime = millis();
  
  Serial.begin(9600);
  pinMode(digitalIn,  INPUT);
  pinMode(RelayPin, OUTPUT);
  lcd.createChar(0, deg); //Create the degree symbol
  lcd.begin(16, 2); //set up the LCD's no. of columns and rows
  lcd.print("MAX31855 test"); // wait for MAX chip to stabilize
  delay(1000);
  //Initialise all the readTemp[numReadings] inside the array to 0
  for (int thisReading = 0; thisReading < numReadings; thisReading++)
  {
    readTemp[thisReading] = 0;
  }
  //Initialise all the readValue[numReadings2] insided the array to 0
  for (int thisReading2 = 0; thisReading2 < numReadings2; thisReading2++)
  {
    readValue[thisReading2] = 0;
  }

  //tell the PID to range between 0 and the full window size
  myPID.SetOutputLimits(0, WindowSize);

  //turn the PID on
  myPID.SetMode(AUTOMATIC);
  
  //delay(1000);
}

void loop() 
{
  unsigned long t_start = micros(); //For testing purpose ONLY
  
  lcd.setCursor(0, 0); //1st column, 1st row
  switchState = digitalRead(digitalIn);

//**********Enter SET VALUE mode**********
  if (switchState == HIGH)
  {
    totalValue = totalValue - readValue[readIndex2];
    readValue[readIndex2] = analogRead(inputPin);
    totalValue = totalValue + readValue[readIndex2];
    readIndex2 = readIndex2 + 1;

    if (readIndex2 >= numReadings2)
    {
      readIndex2 = 0;
    }

    averageValue = (totalValue / numReadings2) /1023 * 182;
    setValue = round(averageValue) + 20;
    lcd.print("SV(");
    lcd.write(byte(0));
    lcd.print("C)= ");
    lcd.print(setValue);
    lcd.print("      ");
    lcd.setCursor(0, 1);
    lcd.print("Set T, Max200  ");

    //Limit the allowed SET VALUE is exceed "MaxT"
    if (setValue >= MaxT)
    {
      setValue = MaxT;
    }

    Setpoint = setValue;

    delay(100); //delay time for SET VALUE loop
  }
//**********Enter SET VALUE mode**********

//**********Exit SET VALUE mode**********
//**********Monitor Temperature**********
//**************PID Control**************
  else if (switchState == LOW)
  {
    c = thermocouple.readCelsius();

    //**********Thermocouple signal LOST**********
    if (isnan(c))
    {
      lcd.setCursor(0, 1); //1st column, 2nd row
      lcd.print("T/C Problem");
      delay(500);
      lcd.clear();
    }
    //**********Thermocouple signal LOST**********
    
    else
    {
      lcd.setCursor(0, 0); //1st column, 1st row
      lcd.print("SV(");
      lcd.write(byte(0));
      lcd.print("C)= ");
      lcd.print(setValue);
      lcd.print("   ");
      lcd.setCursor(12, 0);
      lcd.print("LOCK");
     
      total = total - readTemp[readIndex];
      //double c = thermocouple.readCelsius();
      readTemp[readIndex] = c;
      total = total + readTemp[readIndex];
      readIndex = readIndex + 1;

      if (readIndex >= numReadings)
      {
        readIndex = 0;
      }

      averageC = round(total / numReadings);
      
      Input = averageC; //Input for PID

//      Input = thermocouple.readCelsius();
      myPID.Compute(); //Compute PID

      if(millis() - windowStartTime > WindowSize)
      {
        windowStartTime += WindowSize;
      }

      //**********PID On/Off**********
      if (Output < millis() - windowStartTime)
      { digitalWrite(RelayPin, HIGH); }
      else
      { digitalWrite(RelayPin, LOW);  }
      //**********PID On/Off**********

      lcd.setCursor(0, 1); //1st column, 2nd row
      lcd.print("PV(");
      lcd.write(byte(0));
      lcd.print("C)= ");
      lcd.print(averageC);
      lcd.print("      ");

      
      //For testing purpose ONLY
      unsigned long t_end = micros();
      unsigned long delta = t_end - t_start;
      Serial.println(delta);

      //Serial output to computer serial COM port [OPTIONAL]
      //Serial.print(averageC); //integer average temperature
      //Serial.print(",");
      //EXTRA FOR CONFIRMATION OF ROUNDING
      //Serial.println(total/numReadings); //Floating average
    }
    //delay(delaytime);
  }
//**************PID Control**************
//**********Monitor Temperature**********
//**********Exit SET VALUE mode**********
}
